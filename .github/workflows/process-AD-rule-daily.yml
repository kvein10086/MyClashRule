name: Process AWAvenue Ads Rule Daily

on:
  schedule:
    - cron: '0 16 * * *' # 每天的北京时间 00:00 运行一次 (UTC+8 转 UTC 为 16:00)
  workflow_dispatch: # 手动触发工作流

jobs:
  process-rule:
    runs-on: ubuntu-latest  # 选择一个合适的虚拟环境

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # 拉取代码仓库中的文件

      - name: Download AWAvenue-Ads-Rule-Clash.yaml
        run: |
          # 添加错误处理
          if ! curl -o AWAvenue-Ads-Rule-Clash.yaml https://raw.githubusercontent.com/TG-Twilight/AWAvenue-Ads-Rule/main/Filters/AWAvenue-Ads-Rule-Clash.yaml; then
            echo "下载规则文件失败"
            exit 1
          fi

      - name: Process the file
        run: |
          # 创建临时目录
          mkdir -p temp
          
          # 处理文件并添加错误检查
          if ! sed "s/- '/DOMAIN-SUFFIX,/g" AWAvenue-Ads-Rule-Clash.yaml | sed "s/'//g" > temp/temp.list; then
            echo "处理文件失败"
            exit 1
          fi
          
          sed -n '/DOMAIN-SUFFIX/,$p' temp/temp.list > temp/temp2.list
          sed 's/^ *//' temp/temp2.list > Rule/AWAvenue-Ads-Rule.list
          
          # 检查文件是否生成成功
          if [ ! -s Rule/AWAvenue-Ads-Rule.list ]; then
            echo "生成规则文件失败"
            exit 1
          fi

      - name: Compare files
        id: compare
        run: |
          if [ -f "Rule/AWAvenue-Ads-Rule.list" ]; then
            if git show HEAD:Rule/AWAvenue-Ads-Rule.list > temp/old_list.txt 2>/dev/null; then
              diff --unchanged-line-format='' --old-line-format='- %L' --new-line-format='+ %L' temp/old_list.txt Rule/AWAvenue-Ads-Rule.list > temp/diff_output.txt || true
            else
              echo "首次生成规则文件" > temp/diff_output.txt
            fi
          else
            echo "规则文件不存在" > temp/diff_output.txt
          fi

          if [ ! -s temp/diff_output.txt ]; then
            echo "文件没有变更。" > temp/diff_output.txt
            echo "status=no-change" >> $GITHUB_OUTPUT
          else
            echo "status=change" >> $GITHUB_OUTPUT
          fi

      - name: Update README.md
        if: steps.compare.outputs.status == 'change'
        run: |
          # 使用更安全的日志更新方式
          LOG_DATE=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          DIFF_CONTENT=$(cat temp/diff_output.txt)
          
          # 创建新的日志内容
          echo -e "### ${LOG_DATE}\n\n\`\`\`diff\n${DIFF_CONTENT}\n\`\`\`\n" > temp/new_log.txt
          
          # 提取README中日志部分之前的内容
          sed -n '1,/^## 广告规则更新日志$/p' README.md > temp/readme_header.txt
          
          # 提取现有的第一条日志（最近的一条）
          awk '
            BEGIN { in_log=0; log_count=0; current_entry="" }
            /^## 广告规则更新日志/ { in_log=1; next }
            /^##/ && in_log { exit }
            in_log && /^### / { 
              if (log_count == 0) {
                current_entry = $0 "\n"
                log_count++
              } else if (log_count == 1) {
                print current_entry
                exit
              }
              next
            }
            in_log && log_count == 1 { current_entry = current_entry $0 "\n" }
          ' README.md > temp/recent_log.txt
          
          # 提取所有历史日志（第2条及以后的所有日志）
          awk '
            BEGIN { in_log=0; log_count=0; in_history=0 }
            /^## 广告规则更新日志/ { in_log=1; next }
            /^##/ && in_log { exit }
            in_log && /^### / { 
              log_count++
              if (log_count >= 2) {
                in_history = 1
              }
            }
            in_log && in_history { print }
          ' README.md > temp/history_logs.txt
          
          # 提取日志部分之后的内容
          awk '
            BEGIN { in_log=0; after_log=0 }
            /^## 广告规则更新日志/ { in_log=1; next }
            /^##/ && in_log { after_log=1; in_log=0 }
            after_log { print }
          ' README.md > temp/readme_footer.txt
          
          # 重新构建 README.md
          cat temp/readme_header.txt > temp/README.new
          echo "" >> temp/README.new
          
          # 添加新日志
          cat temp/new_log.txt >> temp/README.new
          
          # 添加最近一条历史日志
          if [ -s temp/recent_log.txt ]; then
            cat temp/recent_log.txt >> temp/README.new
          fi
          
          # 添加折叠的历史日志
          if [ -s temp/history_logs.txt ]; then
            echo "<details>" >> temp/README.new
            echo "<summary>📋 查看历史更新日志</summary>" >> temp/README.new
            echo "" >> temp/README.new
            cat temp/history_logs.txt >> temp/README.new
            echo "</details>" >> temp/README.new
            echo "" >> temp/README.new
          fi
          
          # 添加日志部分之后的内容
          if [ -s temp/readme_footer.txt ]; then
            cat temp/readme_footer.txt >> temp/README.new
          fi
          
          mv temp/README.new README.md

      - name: Commit and push changes
        if: steps.compare.outputs.status == 'change'
        env:
          PAT: ${{ secrets.PAT }}
        run: |
          # 配置 Git 用户信息
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # 保存当前的更改
          git stash
          
          # 获取最新的远程更改
          git fetch origin main
          
          # 切换到 main 分支
          git checkout main
          
          # 重置到远程状态
          git reset --hard origin/main
          
          # 应用之前保存的更改
          git stash pop
          
          # 添加并提交文件
          git add Rule/AWAvenue-Ads-Rule.list README.md
          git commit -m "更新广告拦截规则文件和最新日志"
          
          # 添加重试机制
          for i in {1..3}; do
            if git push https://x-access-token:${{ secrets.PAT }}@github.com/kvein10086/MyClashRule.git HEAD:main; then
              echo "成功推送更改"
              break
            fi
            if [ $i -eq 3 ]; then
              echo "推送更改失败"
              exit 1
            fi
            echo "第 $i 次推送失败，等待 5 秒后重试..."
            sleep 5
          done

      - name: Cleanup
        if: always()
        run: |
          rm -rf temp
